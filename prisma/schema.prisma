// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid()) @map("id")
  name         String     @map("name")
  email        String     @unique @map("email")
  passwordHash String     @map("password_hash")
  created_at   DateTime   @default(now()) @map("created_at")
  updated_at   DateTime   @updatedAt @map("updated_at")
  templates    Template[]
  reports      Report[]

  @@index([email], name: "users_email_idx")
  @@map("users")
}

enum TemplateStatus {
  failed
  succeeded
  processing
}

model Template {
  id              String         @id @default(uuid()) @map("id")
  userId          String         @map("user_id")
  fileUrl         String         @map("file_url")
  templateContent String         @map("template_content")
  status          TemplateStatus @map("status")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  md5Hash         String         @map("md5_hash")
  name            String         @map("name")

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories Category[]

  @@map("templates")
}

model Category {
  id         String     @id @default(uuid())
  title      String     @map("title")
  templateId String     @map("template_id")
  questions  Question[]
  template   Template   @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("categories")
}

enum QuestionType {
  input
  number
  boolean
}

model Question {
  id         String       @id @default(uuid())
  categoryId String       @map("category_id")
  question   String       @map("question")
  type       QuestionType @map("type")
  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Report {
  id         String   @id @default(uuid()) @map("id")
  userId     String   @map("user_id")
  name       String   @map("name")
  location   String   @map("location")
  createdAt  DateTime @default(now()) @map("created_at")
  categories Json     @map("categories")
  user       User     @relation(fields: [userId], references: [id])

  @@map("reports")
}
